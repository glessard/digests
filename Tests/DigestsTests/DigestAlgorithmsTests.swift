//
//  DigestAlgorithmsTests.swift
//  DigestsTests
//
//  Created by Guillaume Lessard on 7/15/18.
//

import XCTest
import Digests

private let text = """
                   Lorem ipsum dolor sit amet, eam at tota veri epicurei, nusquam expetenda te his. \
                   In vis quis affert pericula. Ad mei graecis gloriatur. Alia equidem.
                   """

// Compare to output generated by https://www.freeformatter.com/message-digest.html

private let MD2Digest    = "b5f789ddd6d7624a4f0b6db16bbfc7d7"
private let MD4Digest    = "8d30ef9ee4d07a48e9d20031da7db60e"
private let MD5Digest    = "32bae3b3d21d0544c94537fe9532342f"
private let SHA1Digest   = "f2daf574b91a4af043b9d2113a244503403a779b"
private let SHA224Digest = "bed3a3dc18b3b2c70fb0ae80c485e038ef9e7a8b86bfa038ba69ed7e"
private let SHA256Digest = "19587f2ca00b1ed0f8889a099ce7890f6ffdd7aeb03093ac3a44645e527c8b19"
private let SHA384Digest = "0b94378075c1f66bc3ba365e4297b2653cd7617d74aff4cbdbea5fbacec64f4083519d51b346eeb7a0e7fed03285bf2a"
private let SHA512Digest = "c301c3c9afecf780e585a07fb327e980493c1ab8f7aa75e87946bbb2118f54344d86994a8f12c851549c0e507fc9578ec2d77a85e13e567b1f58f4b2b8ebe17d"

class DigestAlgorithmsTests: XCTestCase
{
  func testMD2()
  {
    var generator = MD2()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == MD2Digest)
  }

  func testMD4()
  {
    var generator = MD4()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == MD4Digest)
  }

  func testMD5()
  {
    var generator = MD5()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == MD5Digest)
  }

  func testSHA1()
  {
    var generator = SHA1()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == SHA1Digest)
  }

  func testSHA224()
  {
    var generator = SHA224()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == SHA224Digest)
  }

  func testSHA256()
  {
    var generator = SHA256()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == SHA256Digest)
  }

  func testSHA384()
  {
    var generator = SHA384()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == SHA384Digest)
  }

  func testSHA512()
  {
    var generator = SHA512()
    generator.combine(with: text)
    let bytes = generator.finalize()

    let digest = bytes.reduce(into: "", { $0.append(String(format: "%02x", $1)) } )
    XCTAssert(digest == SHA512Digest)
  }

}
